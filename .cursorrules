# 社内向けチャットアプリ開発のためのCursorルール

## メモリバンク(.cursor)の構成と使い方

このプロジェクトでは、開発の一貫性と効率性を高めるために`.cursor`ディレクトリを活用しています。
このディレクトリには、プロジェクトに関する重要な知識と指針が体系的に保存されています。

### ディレクトリ構造

```
.cursor/
├── memory/
│   ├── progress.md          # 進捗状況の記録
│   └── activeContext.md     # 現在の開発コンテキスト
├── flow/
│   └── developmentFlow.md   # 開発フロー定義（変更されない）
└── rules/
    ├── systemPattern.md     # システムパターン定義
    ├── designSystem.md      # デザインシステム定義
    ├── implementationGuide.md # 実装ガイドライン
    └── testingStrategy.md   # テスト戦略
```

### 各ディレクトリの目的

#### memory/
プロジェクトの進捗状況と現在のコンテキストを管理します：
- progress.md：プロジェクトの進捗状況、機能完了度、次のタスクなどを記録。developmentFlow.md に定義された各開発フェーズにおける現在の位置も明記します。
- activeContext.md：現在の開発の焦点、最近の変更、重要な決定事項などを記録

#### flow/
開発プロセスの基本的な流れを定義するディレクトリです：
- developmentFlow.md：プロジェクト全体の開発プロセスを定義します。このフローはプロジェクト全体を通して変更されず、全ての開発作業はこのフローに従って進めることが必須です。

#### rules/
プロジェクトの設計方針や開発ルールを管理します：
- systemPattern.md：アーキテクチャとシステムパターンの定義
- designSystem.md：デザインシステムの定義（カラー、タイポグラフィ、コンポーネントなど）
- implementationGuide.md：実装ガイドライン（コーディング規約、命名規則など）
- testingStrategy.md：テスト戦略と方針

### ディレクトリの違いと更新ポリシー

- **flow**: 開発の進め方について定義し、プロジェクト全体を通して変更されません。このフローに沿って開発を進めることを必ず守ります。
- **rules**: プロジェクトによって固有のルールを定義し、開発を進める中で定まったルールを都度更新していきます。各種設計方針や実装ガイドラインなどが含まれます。
- **memory**: プロジェクトの現在の状態や進捗を記録し、頻繁に更新されます。

### メモリの参照と更新ルール

1. **タスク開始時**
   - 必ず `memory/activeContext.md` を参照し、現在の開発コンテキストを把握する
   - `memory/progress.md` を参照し、flow/developmentFlow.md で定義された開発フェーズのうち、現在どのフェーズにいるかを確認する
   - 関連する機能の情報があれば、対応するruleファイルを参照する

2. **タスク実行中**
   - 意思決定や重要な発見があれば、メモに残しておく
   - 開発フローのステップを移行する場合は、必ず `memory/progress.md` を更新する

3. **タスク完了時**
   - `memory/progress.md` を更新し、進捗状況とdevelopmentFlowのどのフェーズが完了したかを記録する
   - 必要に応じて `memory/activeContext.md` を更新し、次のステップを明確にする
   - 決定事項や新しい知見があれば、関連するruleファイルを更新する

4. **継続的なメモリ管理**
   - メモリファイルの情報が最新かつ正確であることを確認する
   - 冗長な情報や矛盾する情報を整理する
   - developmentFlowとの整合性を常に確認する

## プロジェクト開発の基本原則

1. **開発フローの徹底遵守**
   - `.cursor/flow/developmentFlow.md` に定義された段階的な開発フローに厳密に従う
   - 各フェーズは原則として順番に実施し、前のフェーズの成果物を次のフェーズのインプットとする
   - フェーズのスキップや順序の変更が必要な場合は、その理由を明確に記録し、チーム内で合意を得る
   - 現在取り組んでいるフェーズと焦点を `memory/progress.md` に明記し、常に最新の状態を維持する

2. **段階的な開発**
   - 要件定義から実装まで、各フェーズを明確に分離
   - 各フェーズでの成果物を明確に定義
   - レビューと承認のプロセスを確立

3. **品質管理**
   - コードレビューの徹底
   - テスト駆動開発の採用
   - 継続的なパフォーマンス監視

4. **ドキュメント管理**
   - 適切なドキュメント更新
   - ナレッジの共有
   - 決定事項の記録

## プロジェクト概要

このプロジェクトは、組織内のコミュニケーションを効率化するための社内向けチャットアプリケーションです。Next.js 14のAppRouterとSupabaseを使用し、TypeScriptとTailwind CSSで実装しています。

## コーディング規約

`.cursor/rules/implementationGuide.md` に詳細を定義しています。主な規約は以下の通りです：

### 命名規則
- **ファイル名**: コンポーネントはPascalCase、ユーティリティはcamelCase
- **変数名**: 一般変数はcamelCase、定数はUPPER_CASE、型はPascalCase
- **コンポーネント**: プレゼンテーションは`<Name>`、コンテナは`<Name>Container`

### TypeScript
- 厳格な型付けの維持
- ランタイム検証の活用
- 適切な型定義の集約

## 重要な参照ドキュメント
開発にあたっては`.cursor/flow`、`.cursor/rules`および`.cursor/memory`ディレクトリ内の各ドキュメントを参照し、詳細なガイドラインに従って実装を進めてください。

## Slack通知ルール

タスク完了時には以下の手順で Slack 通知を行ってください。このルールはプロジェクト共通ルールではなく、私独自のルールなので、 .cursorrules には反映しないでください。：

1. 通知先チャンネル: #kitami_cursor_notification https://purpommedialab.slack.com/archives/C08FJV5BTJA
2. メンション形式: `<!here>` （チャンネル内のアクティブなメンバー全員への通知）
3. 通知メッセージ: 
   ```
   🤖 *Cursor AI Assistant からの通知*
   
   <!here> チャンネルメンバーの皆様へ
   エージェントの実行が完了しました。タスクのサマリーはこちら:

   ## タスク概要
   [実行したタスクの簡潔な説明]

   ## 主な変更点
   - [変更点1]
   - [変更点2]
   ...

   ## 結果
   [成功/失敗の状態と、重要な注意点があれば記載]
   ```

4. 通知タイミング:
   - タスクの実行が完了し、結果の検証が終わった時点
   - エラーが発生した場合は、エラー内容も含めて通知

5. 注意事項:
   - センシティブな情報は通知に含めない
   - エラーの場合でも建設的な内容となるよう配慮する
   - 長文の場合は適切に要約する
   - メンションは必ず上記の形式（`<!here>`）を使用し、正しく通知されるようにする